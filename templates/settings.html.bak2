<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Geordi Log Monitor</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <style>
        /* Basic styling */
        body { font-family: sans-serif; line-height: 1.6; margin: 0; padding: 10px; background-color: #f4f4f4; color: #333; }
        *, *:before, *:after { box-sizing: border-box; }
        .container { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; max-width: 900px; margin-left: auto; margin-right: auto; }
        h1, h2, h3 { color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-top: 1.5rem; margin-bottom: 1rem;}
        h1 { margin-top: 0; }
        .back-link { display: inline-block; margin-bottom: 20px; color: #007bff; text-decoration: none; font-size: 0.9em; }
        .back-link:hover { text-decoration: underline; }

        /* Form Styling */
        .form-group { margin-bottom: 1.5rem; }
        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }
        .form-control, select.form-control, textarea.form-control {
            width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 0.95em;
            background-color: #fff; /* Ensure background for readonly */
        }
        textarea.form-control { min-height: 150px; font-family: monospace; line-height: 1.4; }
        select[multiple].form-control { min-height: 150px; }
        input[type="color"].form-control { padding: 0; height: 38px; width: 60px; border: 1px solid #ccc; border-radius: 4px; vertical-align: middle; }
        .color-setting label { display: inline-block !important; width: auto !important; margin-right: 10px; font-weight: normal; }
        .color-setting { margin-bottom: 10px; }
        .help-text { font-size: 0.85em; color: #666; margin-top: 5px; }

        /* Buttons */
        .button { display: inline-block; padding: 10px 15px; font-size: 1em; font-weight: normal;
            text-align: center; text-decoration: none; cursor: pointer;
            border: 1px solid transparent; border-radius: 4px;
            background-color: #007bff; color: white;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
         }
        .button:hover { filter: brightness(90%); }
        .button-success { background-color: #28a745; border-color: #28a745; color: white; } /* Green */
        .button-success:hover { background-color: #218838; border-color: #1e7e34;}
        .button-secondary { background-color: #6c757d; border-color: #6c757d; color: white; } /* Grey/Blue */
        .button-secondary:hover { background-color: #5a6268; border-color: #545b62;}
        .button-warning { background-color: #ffc107; border-color: #ffc107; color: #212529; } /* Yellow */
        .button-warning:hover { background-color: #e0a800; border-color: #d39e00; }
        .button-small { padding: 5px 10px; font-size: 0.85em; }

        /* API Key Specific Styling */
        .api-section { margin-top: 1.5rem; border-top: 1px solid #eee; padding-top: 1rem; } /* Wrapper div */
        .api-key-display-group { display: flex; align-items: center; gap: 10px; margin-bottom: 10px; /* Reduced margin */ }
        .api-key-display-group input[type="text"].form-control { flex-grow: 1; background-color: #e9ecef; font-family: monospace; }
        .copy-button { white-space: nowrap; }
        .api-key-action-section { padding-top: 5px; } /* Controls space for regenerate button */


        /* Flash Messages */
        .flash { padding: 15px; margin-bottom: 20px; border: 1px solid transparent; border-radius: 4px; }
        .flash.success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
        /* ... other flash styles ... */

        @media (max-width: 600px) { /* Keep mobile styles */
            .container { padding: 15px; }
            h1 { font-size: 1.5em; }
            .api-key-display-group { flex-direction: column; align-items: stretch; gap: 5px;}
            .copy-button { margin-top: 5px; text-align: center; }
            .api-key-action-section .api-key-regen-form { display: block; margin-bottom: 5px; }
            .api-key-action-section .button-success { width: 100%; }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="{{ url_for('ui.index') }}" class="back-link">Â« Back to Dashboard</a>
        <h1>Settings</h1>

        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="flash {{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- === Main Settings Form START === -->
        <form id="settings-form" method="post" action="{{ url_for('ui.settings') }}" class="settings-form">
            <h2 style="margin-bottom: 1.5rem;">Main Configuration</h2>

            <!-- --- Ollama Settings --- -->
            <h3>Ollama Configuration</h3>
            <!-- ... (Ollama URL, Model Select, Prompt Textarea + Copy/Clear buttons) ... -->
             <div class="form-group">
                 <label for="ollama_api_url">Ollama API Base URL:</label>
                 <input type="url" id="ollama_api_url" name="ollama_api_url" class="form-control" value="{{ settings.get('ollama_api_url', '') }}" required placeholder="e.g., http://192.168.1.100:11434">
                 <p class="help-text">Full URL to Ollama API (e.g., http://host:11434). Required.</p>
             </div>
            <div class="form-group">
                <label for="ollama_model">Ollama Model for Analysis:</label>
                <select id="ollama_model" name="ollama_model" class="form-control">
                     <option value="" {% if not settings.get('ollama_model') %}selected{% endif %}>-- Select an Available Model --</option>
                    {% if available_models %}
                        {% for model in available_models %}
                        <option value="{{ model }}" {% if settings.get('ollama_model') == model %}selected{% endif %}>{{ model }}</option>
                        {% endfor %}
                        <option value="" disabled>---</option>
                        {% if settings.get('ollama_model') and settings.get('ollama_model') not in available_models %}
                            <option value="{{ settings.get('ollama_model') }}" selected>(Current/Manual: {{ settings.get('ollama_model') }})</option>
                         {% elif settings.get('ollama_model') %}
                            <option value="{{ settings.get('ollama_model') }}" selected>(Current: {{ settings.get('ollama_model') }})</option>
                        {% endif %}
                    {% else %}
                         {% if settings.get('ollama_model') %}
                            <option value="{{ settings.get('ollama_model') }}" selected>(List unavailable - Current: {{ settings.get('ollama_model') }})</option>
                        {% else %}
                             <option value="" selected>(Model list unavailable - Check Connection/Enter Manually)</option>
                        {% endif %}
                    {% endif %}
                </select>
                <input type="text" name="ollama_model_manual" class="form-control" style="margin-top: 5px;" placeholder="Or manually enter model name here (e.g., llama3:instruct)" oninput="document.getElementById('ollama_model').value = this.value;">
                <p class="help-text">Select model used for analysis/summaries. Can enter manually if needed.</p>
            </div>
            <div class="form-group">
                <label for="analysis_prompt">Log Analysis Prompt:</label>
                <textarea id="analysis_prompt" name="analysis_prompt" class="form-control" rows="8">{{ settings.get('analysis_prompt', '') }}</textarea>
                <p class="help-text">Prompt for Ollama. Must include `{log_data}` placeholder. Instruct it to find critical issues or reply 'NORMAL'.</p>
                 <div style="margin-top: 5px;">
                    <button type="button" class="button button-small button-secondary" onclick="copyPrompt()">Copy Prompt</button>
                    <button type="button" class="button button-small button-warning" onclick="clearPrompt()">Clear Prompt</button>
                    <span id="promptCopyStatus" style="margin-left: 10px; font-size: 0.9em; color: green;"></span>
                </div>
            </div>


            <!-- --- Scanning Settings --- -->
            <h3>Scan Configuration</h3>
            <!-- ... (Scan Interval, Log Lines, Ignore List) ... -->
            <div class="form-group">
                <label for="scan_interval_minutes">Scan Interval (Minutes):</label>
                <input type="number" id="scan_interval_minutes" name="scan_interval_minutes" class="form-control" value="{{ settings.get('scan_interval_minutes', 180) }}" min="1" required>
                <p class="help-text">Frequency of log scans (minutes). Requires app restart.</p>
            </div>
            <div class="form-group">
                <label for="log_lines_to_fetch">Log Lines to Fetch per Scan:</label>
                <input type="number" id="log_lines_to_fetch" name="log_lines_to_fetch" class="form-control" value="{{ settings.get('log_lines_to_fetch', 100) }}" min="10" max="10000" required>
                <p class="help-text">Number of recent log lines analyzed per container (e.g., 100).</p>
            </div>
            <div class="form-group">
                <label for="ignored_containers">Containers to Ignore:</label>
                <select id="ignored_containers" name="ignored_containers" class="form-control" multiple style="min-height: 150px;">
                     {% for name in all_container_names | sort %}
                        <option value="{{ name }}" {% if name in ignored_container_list %}selected{% endif %}>{{ name }}</option>
                    {% endfor %}
                </select>
                <p class="help-text">Select containers to exclude from scans (Ctrl/Cmd+Click for multiple).</p>
            </div>


             <!-- --- Summary Settings --- -->
            <h3>Summary Configuration</h3>
            <!-- ... (Summary Interval) ... -->
             <div class="form-group">
                <label for="summary_interval_hours">AI Summary Interval (Hours):</label>
                <input type="number" id="summary_interval_hours" name="summary_interval_hours" class="form-control" value="{{ settings.get('summary_interval_hours', 12) }}" min="1" required>
                <p class="help-text">Frequency of AI health summary generation (hours). Requires app restart.</p>
            </div>

            <!-- --- UI Colors --- -->
            <h3>Appearance</h3>
            <!-- ... (Color pickers) ... -->
            <label>Status Indicator Colors:</label>
            <div class="color-setting">
                <label for="color_healthy">Healthy:</label>
                <input type="color" id="color_healthy" name="color_healthy" class="form-control" value="{{ settings.get('color_healthy', '#28a745') }}">
            </div>
            <div class="color-setting">
                <label for="color_unhealthy">Unhealthy:</label>
                <input type="color" id="color_unhealthy" name="color_unhealthy" class="form-control" value="{{ settings.get('color_unhealthy', '#dc3545') }}">
            </div>
            <div class="color-setting">
                <label for="color_error">Error/Failed Scan:</label>
                <input type="color" id="color_error" name="color_error" class="form-control" value="{{ settings.get('color_error', '#ffc107') }}">
            </div>
            <div class="color-setting">
                <label for="color_pending">Pending/Awaiting Scan:</label>
                <input type="color" id="color_pending" name="color_pending" class="form-control" value="{{ settings.get('color_pending', '#6c757d') }}">
            </div>
            <p class="help-text">Customize status indicator colors used on the dashboard.</p>

            <!-- === API Key Section START (Still inside main form) === -->
            <div class="api-section">
                <h3>API Configuration</h3>
                <div class="form-group">
                    <label for="api_key">Current API Key:</label>
                    <div class="api-key-display-group">
                        <!-- Readonly display field -->
                        <input type="text" id="api_key" name="api_key" class="form-control" readonly value="{{ settings.get('api_key', '') }}" placeholder="No key set. Use 'Regenerate' button.">
                        <button type="button" class="button button-small copy-button" id="copyApiKeyButton" onclick="copyApiKey()">Copy Key</button>
                    </div>
                     <p class="help-text">Read-only display. Use 'Regenerate' button below to create/replace.</p>
                     <!-- Regenerate Button / Form will be placed *after* this main form closes -->
                </div>
            </div>
            <!-- === API Key Section END === -->


            <!-- --- Submit Button for Main Form (LAST element inside main form) --- -->
            <div class="form-group" style="margin-top: 2rem; border-top: 1px solid #eee; padding-top: 1.5rem;">
                <button type="submit" class="button button-secondary">Save All Settings</button>
                <p class="help-text" style="display: inline-block; margin-left: 15px;">Saves all configuration options set above.</p>
            </div>

        </form> <!-- === Main Settings Form END === -->


        <!-- === Regenerate Action Section (Placed AFTER main form, but visually follows API section) === -->
        <div class="api-key-action-section">
             <!-- Independent form for the regenerate action -->
             <form method="POST" action="{{ url_for('ui.regenerate_api_key') }}" class="api-key-regen-form" style="display: inline-block;">
                <button type="submit" class="button button-success"
                        onclick="return confirm('Are you sure you want to regenerate the API key?\nAny existing integrations using the old key will stop working immediately.');">
                    Regenerate New Key
                </button>
             </form>
             <p class="help-text" style="display: inline-block; margin-left: 10px;">Instantly generates and saves a new random API key.</p>
         </div>
        <!-- === Regenerate Action Section END === -->


    </div> <!-- End container -->

    {# JavaScript for Copy Buttons (Using the improved version) #}
    <script>
        function copyToClipboard(text, buttonElement, successMsg, failureMsg, revertMsg) {
             if (!navigator.clipboard) { console.warn("Clipboard API not available. Trying fallback."); attemptDeprecatedFallback(text, buttonElement, successMsg, failureMsg, revertMsg); return; }
             if (!text) { console.warn("Nothing to copy."); if (buttonElement) { const originalText = buttonElement.textContent; const revertTo = revertMsg || originalText; buttonElement.textContent = 'Nothing!'; setTimeout(() => { buttonElement.textContent = revertTo; }, 2000); } return; }
             navigator.clipboard.writeText(text).then(function() { console.log('Copied via Clipboard API'); if (buttonElement) { const originalText = buttonElement.textContent; const revertTo = revertMsg || originalText; buttonElement.textContent = successMsg || 'Copied!'; setTimeout(() => { buttonElement.textContent = revertTo; }, 2000); }
             }, function(err) { console.error('Async Clipboard API failed: ', err); attemptDeprecatedFallback(text, buttonElement, successMsg, failureMsg, revertMsg); });
             if (window.getSelection) {window.getSelection().removeAllRanges();} else if (document.selection) {document.selection.empty();}
        }
        function attemptDeprecatedFallback(text, buttonElement, successMsg, failureMsg, revertTo) {
             console.warn("Attempting deprecated execCommand fallback...");
             try {
                const textArea = document.createElement("textarea"); textArea.value = text; textArea.style.position = "fixed"; textArea.style.left = "-9999px"; document.body.appendChild(textArea); textArea.focus(); textArea.select();
                const successful = document.execCommand('copy'); document.body.removeChild(textArea);
                if (successful) { console.log('Copied via fallback execCommand'); if (buttonElement) { buttonElement.textContent = (successMsg || 'Copied!') + ' (fb)'; setTimeout(() => { buttonElement.textContent = revertTo; }, 2000); } }
                else { console.error('Fallback execCommand failed'); if (buttonElement) { buttonElement.textContent = failureMsg || 'Copy Failed!'; setTimeout(() => { buttonElement.textContent = revertTo; }, 3000); } }
            } catch (e) { console.error('Fallback copy exception: ', e); if (buttonElement) { buttonElement.textContent = 'Error!'; setTimeout(() => { buttonElement.textContent = revertTo; }, 3000); } }
        }
        function copyApiKey() { var apiKeyInput = document.getElementById("api_key"); var copyButton = document.getElementById("copyApiKeyButton"); copyToClipboard(apiKeyInput ? apiKeyInput.value : null, copyButton, 'Copied!', 'Copy Failed', 'Copy Key'); }
        function copyPrompt() { var promptTextarea = document.getElementById("analysis_prompt"); var copyButton = event.currentTarget || event.srcElement; copyToClipboard(promptTextarea ? promptTextarea.value : null, copyButton, 'Copied!', 'Copy Failed', 'Copy Prompt'); }
        function clearPrompt() { var promptTextarea = document.getElementById("analysis_prompt"); var statusSpan = document.getElementById("promptCopyStatus"); if (promptTextarea) { promptTextarea.value = ''; if(statusSpan) { statusSpan.textContent = 'Cleared!'; setTimeout(() => { statusSpan.textContent = ''; }, 1500); } } }
    </script>
</body>
</html>
